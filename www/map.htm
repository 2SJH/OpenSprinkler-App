<!--
 * OpenSprinkler App
 * Copyright (C) 2015 - present, Samer Albahra. All rights reserved.
 *
 * This file is part of the OpenSprinkler project <http://opensprinkler.com>.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Weather Station Select</title>
    <script>
        window.google = window.google || {};
        google.maps = google.maps || {};
        ( function() {
            function getScript(src) {
                document.write("<" + "script src='" + src + "'><" + "/script>");
            }

            var modules = google.maps.modules = {};
            google.maps.__gjsload__ = function( name, text) {
                modules[name] = text;
            };

            google.maps.Load = function( apiLoad ) {
                delete google.maps.Load;
                apiLoad([0.009999999776482582,[[["https://mts0.googleapis.com/vt?lyrs=m@292000000\u0026src=api\u0026hl=en-US\u0026","https://mts1.googleapis.com/vt?lyrs=m@292000000\u0026src=api\u0026hl=en-US\u0026"],null,null,null,null,"m@292000000",["https://mts0.google.com/vt?lyrs=m@292000000\u0026src=api\u0026hl=en-US\u0026","https://mts1.google.com/vt?lyrs=m@292000000\u0026src=api\u0026hl=en-US\u0026"]],[["https://khms0.googleapis.com/kh?v=166\u0026hl=en-US\u0026","https://khms1.googleapis.com/kh?v=166\u0026hl=en-US\u0026"],null,null,null,1,"166",["https://khms0.google.com/kh?v=166\u0026hl=en-US\u0026","https://khms1.google.com/kh?v=166\u0026hl=en-US\u0026"]],[["https://mts0.googleapis.com/vt?lyrs=h@292000000\u0026src=api\u0026hl=en-US\u0026","https://mts1.googleapis.com/vt?lyrs=h@292000000\u0026src=api\u0026hl=en-US\u0026"],null,null,null,null,"h@292000000",["https://mts0.google.com/vt?lyrs=h@292000000\u0026src=api\u0026hl=en-US\u0026","https://mts1.google.com/vt?lyrs=h@292000000\u0026src=api\u0026hl=en-US\u0026"]],[["https://mts0.googleapis.com/vt?lyrs=t@132,r@292000000\u0026src=api\u0026hl=en-US\u0026","https://mts1.googleapis.com/vt?lyrs=t@132,r@292000000\u0026src=api\u0026hl=en-US\u0026"],null,null,null,null,"t@132,r@292000000",["https://mts0.google.com/vt?lyrs=t@132,r@292000000\u0026src=api\u0026hl=en-US\u0026","https://mts1.google.com/vt?lyrs=t@132,r@292000000\u0026src=api\u0026hl=en-US\u0026"]],null,null,[["https://cbks0.googleapis.com/cbk?","https://cbks1.googleapis.com/cbk?"]],[["https://khms0.googleapis.com/kh?v=84\u0026hl=en-US\u0026","https://khms1.googleapis.com/kh?v=84\u0026hl=en-US\u0026"],null,null,null,null,"84",["https://khms0.google.com/kh?v=84\u0026hl=en-US\u0026","https://khms1.google.com/kh?v=84\u0026hl=en-US\u0026"]],[["https://mts0.googleapis.com/mapslt?hl=en-US\u0026","https://mts1.googleapis.com/mapslt?hl=en-US\u0026"]],[["https://mts0.googleapis.com/mapslt/ft?hl=en-US\u0026","https://mts1.googleapis.com/mapslt/ft?hl=en-US\u0026"]],[["https://mts0.googleapis.com/vt?hl=en-US\u0026","https://mts1.googleapis.com/vt?hl=en-US\u0026"]],[["https://mts0.googleapis.com/mapslt/loom?hl=en-US\u0026","https://mts1.googleapis.com/mapslt/loom?hl=en-US\u0026"]],[["https://mts0.googleapis.com/mapslt?hl=en-US\u0026","https://mts1.googleapis.com/mapslt?hl=en-US\u0026"]],[["https://mts0.googleapis.com/mapslt/ft?hl=en-US\u0026","https://mts1.googleapis.com/mapslt/ft?hl=en-US\u0026"]],[["https://mts0.googleapis.com/mapslt/loom?hl=en-US\u0026","https://mts1.googleapis.com/mapslt/loom?hl=en-US\u0026"]]],["en-US","US",null,0,null,null,"https://maps.gstatic.com/mapfiles/","https://csi.gstatic.com","https://maps.googleapis.com","https://maps.googleapis.com",null,"https://maps.google.com","https://csi.gstatic.com","https://maps.gstatic.com/maps-api-v3/api/images/"],["https://maps.gstatic.com/maps-api-v3/api/js/19/10","3.19.10"],[1958094959],1,null,null,null,null,null,"",null,null,1,"https://khms.googleapis.com/mz?v=166\u0026",null,"https://earthbuilder.googleapis.com","https://earthbuilder.googleapis.com",null,"https://mts.googleapis.com/vt/icon",[["https://mts0.googleapis.com/vt","https://mts1.googleapis.com/vt"],["https://mts0.googleapis.com/vt","https://mts1.googleapis.com/vt"],null,null,null,null,null,null,null,null,null,null,["https://mts0.google.com/vt","https://mts1.google.com/vt"],"/maps/vt",292000000,132],2,500,[null,"https://g0.gstatic.com/landmark/tour","https://g0.gstatic.com/landmark/config","","https://www.google.com/maps/preview/log204","","https://static.panoramio.com.storage.googleapis.com/photos/",["https://geo0.ggpht.com/cbk","https://geo1.ggpht.com/cbk","https://geo2.ggpht.com/cbk","https://geo3.ggpht.com/cbk"]],["https://www.google.com/maps/api/js/master?pb=!1m2!1u19!2s10!2sen-US!3sUS!4s19/10","https://www.google.com/maps/api/js/widget?pb=!1m2!1u19!2s10!2sen-US"],null,0,0], loadScriptTime);
            };

            var loadScriptTime = new Date().getTime();
            getScript("https://maps.gstatic.com/maps-api-v3/api/js/19/10/main.js");
        })();

        var map, infoWindow, start, stations, airports, droppedPin, current;

        // Handle select button for weather station selection
        document.addEventListener( "click", function( e ) {
            var classes = e.target.className.split(" ");
            if (classes.indexOf("submit") > -1) {
                window.top.postMessage({"WS": e.target.dataset.loc }, "*" );
            }
        }, false);

        // Load the map using the current location as the starting point
        function initialize() {
            if (typeof start === "object") {
                var myOptions = {
                    zoom: 14,
                    center: start,
                    streetViewControl: false,
                    mapTypeControl: false,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }

                map = new google.maps.Map(document.getElementById( "map_canvas" ), myOptions);
                infoWindow = new google.maps.InfoWindow;

                // If a current location is specified, display and center it now
                if ( current.lat() !== 0 && current.lng() !== 0 ) {
                    droppedPin = plotMarker( "orgin", { message: "Selected Location" }, current.lat(), current.lng() );
                    var bounds = new google.maps.LatLngBounds();
                    bounds.extend( current );
                    map.fitBounds( bounds );
                }

                // Once the UI/tiles are loaded, let the parent script know
                google.maps.event.addListenerOnce( map, "tilesloaded", function() {
                    window.top.postMessage( { "loaded": true }, "*" );
                } );

                // When the map is clicked, close any open info windows
                google.maps.event.addListener( map, "click", function() {
                    infoWindow.close();
                } );

                // Handle dropping of a new pin / location
                google.maps.event.addListener( map, "click", function( event ) {
                    if ( droppedPin ) {
                        droppedPin.setMap( null );
                        droppedPin = null;
                    }
                    droppedPin = plotMarker( "orgin", { message: "Selected Location" }, event.latLng.lat(), event.latLng.lng() );
                });
            } else {
                setTimeout( initialize, 1 );
            }
        }

        // Handle communication from parent window
        window.onmessage = function( e ) {
            var data = e.data;

            // Handle start point data
            if (data.type === "currentLocation") {
                start = new google.maps.LatLng( data.payload.start.lat, data.payload.start.lon );
                current = new google.maps.LatLng( data.payload.current.lat, data.payload.current.lon );
                initialize();

            // Handle stations data
            } else if (data.type === "pwsData") {
                stations = JSON.parse( decodeURIComponent( data.payload ) );
                plotAllMarkers( stations, true );
            } else if (data.type === "airportData") {
                airports = JSON.parse( decodeURIComponent( data.payload ) );
                plotAllMarkers( airports );
            }
        }

        // Plot all stations on the map
        function plotAllMarkers( markers, areStations ) {
            var bounds = new google.maps.LatLngBounds(),
                openFirst = false,
                marker;

            if ( current.lat() !== 0 && current.lng() !== 0 ) {
                bounds.extend( current );
            } else {
                openFirst = true;
            }

            for (var i = 0; i < markers.length; i++ ) {
                marker = plotMarker( ( areStations ? "pws" : "airport" ), markers[i], markers[i].lat, markers[i].lon );
                if ( i === 0 && openFirst === true ) {
                    new google.maps.event.trigger( marker, "click" );
                }
                bounds.extend( new google.maps.LatLng( markers[i].lat, markers[i].lon ) );
            }

            map.fitBounds( bounds );
        }

        // Plot an individual station on the map
        function plotMarker( type, data, lat, lon ) {
            var marker = new google.maps.Marker( {
                    position: new google.maps.LatLng( lat, lon ),
                    map: map,
                    icon: ( type === "orgin" ? "http://maps.google.com/mapfiles/ms/icons/red-dot.png" :
                        ( type ===  "pws" ? "http://maps.google.com/mapfiles/ms/icons/blue-dot.png" : "http://maps.google.com/mapfiles/ms/icons/orange-dot.png" ) )
                } );

            google.maps.event.addListener( marker, "click", function() {
                infoWindow.close();
                html = createInfoWindow( type, data, lat + "," + lon );
                infoWindow = new google.maps.InfoWindow( {
                    content: html
                } );
                infoWindow.open( map, marker );
            });

            if ( type === "orgin" ) {
                google.maps.event.trigger( marker, "click" );
            }

            return marker;
        }

        // Create text for popup info window
        function createInfoWindow( type, data, latLon ) {
            if (type === "pws") {
                return "<div style='min-height:90px;min-width:170px;text-align:center;'><h3 style='padding:0;margin:0 0 4px 0'>"+
                        (data.city ? data.city + ", " : "" ) + ( data.state ? data.state + ", " : "" ) + data.country +
                    "</h3><span style='font-size:8px;margin:0;padding:0;vertical-align: top'>ID: " + data.id + "</span><br><p style='margin:0'>" +
                        data.neighborhood + "<br>" + data.distance_mi + " mile" + ( data.distance_mi > 1 ? "s" : "" ) + " away<br>" +
                        "<button class='submit' data-loc='" + latLon + "'>Select</button>" +
                    "</p></div>";
            } else if ( type === "airport" ) {
                return "<div style='min-height:80px;min-width:170px;text-align:center;'><h3 style='padding:0;margin:0 0 4px 0'>" +
                        ( data.city ? data.city + ", " : "" ) + ( data.state ? data.state + ", " : "" ) + data.country +
                    "</h3><span style='font-size:8px;margin:0;padding:0;vertical-align: top'>Airport ICAO: " + data.icao + "</span><br>" +
                    "<button class='submit' data-loc='" + latLon + "'>Select</button></div>";
            } else {
                return "<div style='min-height:40px;text-align:center'>" + data.message + "<br><button class='submit' data-loc='" + latLon + "'>Submit</button></div>";
            }
        }
    </script>
    <style>
        html {
            height: 100%;
            overflow: hidden;
        }
        body {
            margin: 0;
            padding: 0;
            height: 100%;
        }
        #map_canvas {
            height: 100%;
        }
        .gm-style-iw {
            overflow: hidden !important;
            line-height: 1.35;
        }
        .selectPWS, .selectAirport {
            border-radius: 6px;
            margin-top: 2px;
        }
    </style>
</head>
<body>
    <div id="map_canvas"></div>
</body>
</html>
